% Include the WoB constraint into the portfolio.
p = addInequality(p,-WoB',-0.33);
% Estimate the return for a risk level of 0.012.
pwgt_avgWoB = estimateFrontierByRisk(p,0.012);
ret_avgWoB = estimatePortReturn(p,pwgt_avgWoB)

ret_avgWoB = 
0.0028

% Return the constraints to the original portfolio.
p.AInequality = []; p.bInequality = [];

Compute the increase in return between these two approaches.

ret_increase = (ret_avgWoB-ret_exclude)/ret_exclude

ret_increase = 
1.5202

This ret_increase value shows that the return from the approach that only bounds the portfolio's
average WoB percentage instead of excluding certain assets has a return 152% higher (for the same
risk level). Hence, when tackling problems with more than two objectives, excluding assets that do
not meet a certain criteria might not be the best option. Instead, a weighted sum of the criteria of
interest might show better results.

Local Functions

function [] = plotContours(p,minWoB,maxWoB,nContour,nPort)

% Set of WoB levels for contour plot.
contourWoB = linspace(minWoB,maxWoB,nContour+1);

% Compute and plot efficient frontier for each value in contourWoB.
figure;
hold on
labels = strings(nContour+1,1);
for i = 1:nContour
    p.bInequality = -contourWoB(i);
    plotFrontier(p,nPort);
    labels(i) = sprintf("%6.2f%% WoB",contourWoB(i)*100);
end
% Plot the "original" mean-variance frontier, i.e., the frontier
% without WoB requierements.
p.AInequality = []; p.bInequality = [];
plotFrontier(p,nPort);
labels(i+1) = "No WoB restriction";
legend(labels,'Location','northwest')
hold off

end

function [] = plotExclusionExample(p,WoB,thresholdWoB, ...
    nPort)

% Compute and plot efficient frontier excluding assets that are below
% the WoB threshold.
nT = length(thresholdWoB);
figure;

Portfolio Optimization Using Social Performance Measure

4-269