% Reward Function Handle
constantReturnRewardFcnHandle = @(loggedSignals) constantReturnReward(loggedSignals, ...
    initialWealth,finalTimePeriod,targetWealth,constantReturn,WMin,WMax);

Episode Termination

The custom step function flags that the episode has finished when the current time period reaches
finalTimePeriod.

Define Custom Step Function

Select the reward function, then define the step function handle.

% Select a reward function

rewardFcnHandle = 
;

% Define step function handle
stepFcn = @(action,loggedSignals) myStepFunction(action, ...
    loggedSignals,prsk,pret,finalTimePeriod,rewardFcnHandle,WMin,WMax);

Define Environment

Use rlFunctionEnv (Reinforcement Learning Toolbox) to construct the custom environment using
the defined observations, actions, and reset and step functions.

gbwmEnvironment = rlFunctionEnv(observationInfo,actionInfo,stepFcn, ...
    resetFcn);

Define Agent

The purpose of the agent is to select actions that are sent to the environment. The agent then
receives new observations from the environment and the reward generated by the submitted actions.
The goal of RL is to train the agent to select the best possible actions to maximize the probability of
attaining the wealth goal by the end of the investment period.

Reinforcement Learning Toolbox™ provides several built-in agents that you can train in environments
with either continuous or discrete observation and action spaces. The table in the section "Built-In
Agents" of “Reinforcement Learning Agents” (Reinforcement Learning Toolbox) summarizes the types
of agents for the different types of observation and action spaces.

Given that the action space in this example is discrete and the observation space is continuous, this
example uses a “Deep Q-Network (DQN) Agent” (Reinforcement Learning Toolbox).

Use rlAgentInitializationOptions (Reinforcement Learning Toolbox) to specify the number of
neurons in each learnable layer.

initializationOptions =...
    rlAgentInitializationOptions('NumHiddenUnit',100);

Use rlDQNAgent (Reinforcement Learning Toolbox) to create the agent using the defined action and
observation specifications.

DQNagent = rlDQNAgent(observationInfo,actionInfo, ...
    initializationOptions);

Set the agent options.

4
Mean-Variance Portfolio Optimization Tools

4-384