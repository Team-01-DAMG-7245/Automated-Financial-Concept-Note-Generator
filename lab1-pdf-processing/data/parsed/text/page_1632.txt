The basic idea is to use the current state of the process to predict its future state, incorporating the
stochastic component.

Antithetic Sampling

Simulation methods allow you to specify a popular variance reduction technique called antithetic
sampling.

This technique attempts to replace one sequence of random observations with another that has the
same expected value but a smaller variance. In a typical Monte Carlo simulation, each sample path is
independent and represents an independent trial. However, antithetic sampling generates sample
paths in pairs. The first path of the pair is referred to as the primary path, and the second as the
antithetic path. Any given pair is independent other pairs, but the two paths within each pair are
highly correlated. Antithetic sampling literature often recommends averaging the discounted payoffs
of each pair, effectively halving the number of Monte Carlo trials.

This technique attempts to reduce variance by inducing negative dependence between paired input
samples, ideally resulting in negative dependence between paired output samples. The greater the
extent of negative dependence, the more effective antithetic sampling is.

Algorithms

This function simulates any vector-valued SDE of the following form:

dXt = B(t, Xt)Xtdt + D(t, Xt)V(t, xt)dWt + Y(t, Xt, Nt)XtdNt

Here:

•
Xt is an NVars-by-1 state vector of process variables.

•
B(t,Xt) is an NVars-by-NVars matrix of generalized expected instantaneous rates of return.

•
D(t,Xt) is an NVars-by-NVars diagonal matrix in which each element along the main diagonal is
the corresponding element of the state vector.

•
V(t,Xt) is an NVars-by-NVars matrix of instantaneous volatility rates.

•
dWt is an NBrowns-by-1 Brownian motion vector.

•
Y(t,Xt,Nt) is an NVars-by-NJumps matrix-valued jump size function.

•
dNt is an NJumps-by-1 counting process vector.

simByEuler simulates NTrials sample paths of NVars correlated state variables driven by
NBrowns Brownian motion sources of risk over NPeriods consecutive observation periods, using the
Euler approach to approximate continuous-time stochastic processes.

This simulation engine provides a discrete-time approximation of the underlying generalized
continuous-time process. The simulation is derived directly from the stochastic differential equation
of motion. Thus, the discrete-time process approaches the true continuous-time process only as
DeltaTime approaches zero.

Version History
Introduced in R2020a

15
Functions

15-326