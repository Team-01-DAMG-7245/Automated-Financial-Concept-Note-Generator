Plot the interpolation times to examine the sequence of interpolation times generated by this
algorithm.

stem(1:length(t), t, 'filled')
xlabel('Index'), ylabel('Interpolation Time (Days)')
title ('Sampling Scheme for the Power-of-Two Algorithm')

The first few samples are widely separated in time and determine the course structure of the paths.
Later samples are closely spaced and progressively refine the detailed structure.

Now that you have generated the sequence of interpolation times, initialize a course time series grid
to begin the interpolation. The sampling process begins at the last observed time and state taken
from the historical short-rate series, and ends 64 days into the future at the expected value of the
Vasicek model derived from the calibrated parameters.

average = obj.StartState * exp(-speed * T) + level * ...
(1 - exp(-speed * T));
X       = [obj.StartState ; average];

Generate five sample paths, setting the Refine input flag to TRUE to insert each new interpolated
state into the time series grid as it becomes available. Perform interpolation on a trial-by-trial basis.
Because the input time series X has five trials (where each page of the three-dimensional time series
represents an independent trial), the interpolated output series Y also has five pages.

nTrials = 5;
rng(63349,'twister')
Y = obj.interpolate(t, X(:,:,ones(nTrials,1)), ...
'Times',[obj.StartTime  T], 'Refine', true);

Plot the resulting sample paths. Because the interpolation times do not monotonically increase, sort
the times and reorder the corresponding short rates.

[t,i] = sort(t);
Y     = squeeze(Y);

Simulating Interest Rates

14-53