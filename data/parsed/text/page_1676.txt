Simulated paths of correlated state variables, returned as an (NPeriods + 1)-by-NVars-by-
NNTrials three-dimensional time-series array.

For a given trial, each row of Paths is the transpose of the state vector Xt at time t. When
StorePaths is set to false, simBySolution returns Paths as an empty matrix.

Times — Observation times associated with simulated paths
column vector

Observation times associated with the simulated paths, returned as an (NPeriods + 1)-by-1
column vector. Each element of Times is associated with the corresponding row of Paths.

Z — Dependent random variates for generating Brownian motion vector
array

Dependent random variates for generating the Brownian motion vector (Wiener processes) that drive
the simulation, returned as a (NPeriods * NSteps)-by-NBrowns-by-NNTrials three-dimensional
time-series array.

N — Dependent random variates for generating the jump counting process vector
array

Dependent random variates for generating the jump counting process vector, returned as an
(NPeriods ⨉ NSteps)-by-NJumps-by-NNTrials three-dimensional time-series array.

More About

Antithetic Sampling

Simulation methods allow you to specify a popular variance reduction technique called antithetic
sampling.

This technique attempts to replace one sequence of random observations with another that has the
same expected value but a smaller variance. In a typical Monte Carlo simulation, each sample path is
independent and represents an independent trial. However, antithetic sampling generates sample
paths in pairs. The first path of the pair is referred to as the primary path, and the second as the
antithetic path. Any given pair is independent other pairs, but the two paths within each pair are
highly correlated. Antithetic sampling literature often recommends averaging the discounted payoffs
of each pair, effectively halving the number of Monte Carlo NTrials.

This technique attempts to reduce variance by inducing negative dependence between paired input
samples, ideally resulting in negative dependence between paired output samples. The greater the
extent of negative dependence, the more effective antithetic sampling is.

Algorithms

The simBySolution function simulates the state vector Xt by an approximation of the closed-form
solution of diagonal drift Merton jump diffusion models. Specifically, it applies a Euler approach to
the transformed log[Xt] process (using Ito's formula). In general, this is not the exact solution to the
Merton jump diffusion model because the probability distributions of the simulated and true state
vectors are identical only for piecewise constant parameters.

This function simulates any vector-valued merton process of the form

15
Functions

15-370