Processing functions are not required to use time (t) or state (Xt). They are also not required to
update or change the input state vector. In fact, simulation and interpolation methods have no
knowledge of any implementation details, and in this respect, they only adhere to a published
interface.

Such processing functions provide a powerful modeling tool that can solve various problems. Such
functions allow you to, for example, specify boundary conditions, accumulate statistics, plot graphs,
and price path-dependent options.

Except for Brownian motion (BM) models, the individual components of the simulated state vector
typically represent variables whose real-world counterparts are inherently positive quantities, such as
asset prices or interest rates. However, by default, most of the simulation and interpolation methods
provided here model the transition between successive sample times as a scaled (possibly
multivariate) Gaussian draw. So, when approximating a continuous-time process in discrete time, the
state vector may not remain positive. The only exception is simBySolution for gbm objects and
simBySolution for hwv objects, a logarithmic transform of separable geometric Brownian motion
models. Moreover, by default, none of the simulation and interpolation methods make adjustments to
the state vector. Therefore, you are responsible for ensuring that all components of the state vector
remain positive as appropriate.

Fortunately, specifying nonnegative states ensures a simple end-of-period processing adjustment.
Although this adjustment is widely applicable, it is revealing when applied to a univariate cir square-
root diffusion model:

Perhaps the primary appeal of univariate cir models where:

is that the short rate remains positive. However, the positivity of short rates only holds for the
underlying continuous-time model.

To illustrate the latter statement, simulate daily short rates of the cir model, using cir, over one
calendar year (approximately 250 trading days).

rng(14151617,'twister')
obj   = cir(0.25,@(t,X)0.1,0.2,'StartState',0.02);
[X,T] = simByEuler(obj,250,'DeltaTime',1/250,'nTrials',5);
sprintf('%0.4f\t%0.4f+i%0.4f\n',[T(195:205)';...
    real(X(195:205,1,4))'; imag(X(195:205,1,4))'])

ans = 
    '0.7760    0.0003+i0.0000
     0.7800    0.0004+i0.0000
     0.7840    0.0002+i0.0000
     0.7880    -0.0000+i0.0000
     0.7920    0.0001+i0.0000
     0.7960    0.0002+i0.0000
     0.8000    0.0002+i0.0000
     0.8040    0.0008+i0.0001
     0.8080    0.0004+i0.0001
     0.8120    0.0008+i0.0001

Simulating Interest Rates

14-55