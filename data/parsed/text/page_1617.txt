Quasi-Monte Carlo Simulation with simByEuler Using a Bates Model

Create a bates object.

AssetPrice = 80;
            Return = 0.03;
            JumpMean = 0.02;
            JumpVol = 0.08;
            JumpFreq = 0.1;
            
            V0 = 0.04;
            Level = 0.05;
            Speed = 1.0;
            Volatility = 0.2;
            Rho = -0.7;
            StartState = [AssetPrice;V0]; 
            Correlation = [1 Rho;Rho 1];

batesObj = bates(Return, Speed, Level, Volatility,...
                JumpFreq, JumpMean, JumpVol,'startstate',StartState,...
                'correlation',Correlation)

batesObj = 
   Class BATES: Bates Bivariate Stochastic Volatility
   --------------------------------------------------
     Dimensions: State = 2, Brownian = 2
   --------------------------------------------------
      StartTime: 0
     StartState: 2x1 double array 
    Correlation: 2x2 double array 
          Drift: drift rate function F(t,X(t)) 
      Diffusion: diffusion rate function G(t,X(t)) 
     Simulation: simulation method/function simByEuler
         Return: 0.03
          Speed: 1
          Level: 0.05
     Volatility: 0.2
       JumpFreq: 0.1
       JumpMean: 0.02
        JumpVol: 0.08

Define the quasi-Monte Carlo simulation using the optional name-value arguments for
'MonteCarloMethod','QuasiSequence', and 'BrownianMotionMethod'.

[paths,time,z] = simByEuler(batesObj,10,'ntrials',4096,'montecarlomethod','quasi','quasisequence

Input Arguments

MDL â€” Stochastic differential equation model
object

Stochastic differential equation model, specified as a bates object. You can create a bates object
using bates.

Data Types: object

simByEuler

15-311